/* eslint-disable no-param-reassign */
import NextAuth from 'next-auth';
import CredentialsProvider from 'next-auth/providers/credentials';
import type { User } from 'next-auth/core/types';
import { v4 as uuidv4 } from 'uuid';

import { prisma } from '../../../lib/prisma';
import { comparePwd } from '../../../lib/password';

/**
 * Handle requests to /api/auth. API is generated by NextAuth.
 */
export default NextAuth({
  providers: [
    CredentialsProvider({
      type: 'credentials',
      name: 'credentials',
      credentials: {},
      async authorize(credentials) {
        const { username, password: plaintextPassword } = credentials as {
          username: string;
          password: string;
        };

        // Demo user
        if (username.startsWith('demo')) {
          return {
            id: uuidv4(),
            username,
            email: `${username}@demo.com`,
            isDemo: true,
          };
        }

        const user = await prisma.admin.findUnique({
          where: { username },
        });

        if (!user || !(await comparePwd(plaintextPassword, user.password))) {
          throw new Error('Invalid credentials');
        }
        return {
          id: user.id,
          username: user.username,
          email: user.email,
          isDemo: false,
        } as User;
      },
    }),
  ],
  pages: {
    signIn: '/landing',
  },
  session: {
    strategy: 'jwt',
  },
  jwt: {
    secret: process.env.NEXTAUTH_SECRET,
  },
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.user = user;
        token.isDemo = user.isDemo;
      }
      return token;
    },
    async session({ session, token }) {
      session.user = token.user as User;
      session.isDemo = token.isDemo as boolean;
      return session;
    },
  },
});
