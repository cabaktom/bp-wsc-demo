generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Page {
  id      String @id @default(uuid())
  name    String @unique @db.VarChar(255)
  title   String @db.VarChar(255)
  content String
  order   Int

  // Relation to seperate demo data
  adminId String?
  Admin   Admin?  @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model Admin {
  id       String @id @default(uuid())
  username String @unique @db.VarChar(255)
  password String
  email    String @unique @db.VarChar(255)

  isDemo Boolean @default(false)

  // Relation to seperate demo data
  Page             Page[]
  SiteSettings     SiteSettings[]
  Participant      Participant[]
  Abstract         Abstract[]
  Image            Image[]
  Programme        Programme[]
  ProgrammeDay     ProgrammeDay[]
  ProgrammeDayItem ProgrammeDayItem[]

  // Self-relation to represent an admin creating other admins
  createdByAdminId String?
  createdBy        Admin?  @relation("CreatedBy", fields: [createdByAdminId], references: [id])
  createdAdmins    Admin[] @relation("CreatedBy")
}

model SiteSettings {
  id     String @id @default(uuid())
  option String @unique
  value  String
  order  Int

  // Relation to seperate demo data
  adminId String?
  Admin   Admin?  @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

enum Participation {
  ONSITE
  ONLINE
}

model Participant {
  id                String        @id @default(uuid())
  fullName          String        @db.VarChar(255)
  email             String        @unique @db.VarChar(255)
  affiliation       String
  participation     Participation @default(ONSITE)
  mailingAddress    String?       @default("")
  student           Boolean       @default(false)
  additionalMessage String?       @default("")
  abstract          Abstract?
  poster            Boolean       @default(false)
  invited           Boolean       @default(false)
  registeredAt      DateTime      @default(now())

  // Relation to seperate demo data
  adminId String?
  Admin   Admin?  @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model Abstract {
  id                 String      @id @default(uuid())
  title              String      @db.VarChar(255)
  additionalAuthors  String?     @default("")
  affiliationAuthors String?     @default("")
  abstract           String?     @default("")
  participant        Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  participantId      String      @unique

  // Relation to seperate demo data
  adminId String?
  Admin   Admin?  @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model Image {
  id               String   @id @default(uuid())
  alt              String?  @default("") @db.VarChar(255)
  path             String   @db.VarChar(255)
  filename         String   @unique @db.VarChar(255)
  originalFilename String   @db.VarChar(255)
  uploadedAt       DateTime @default(now())
  width            Int
  height           Int

  // Relation to seperate demo data
  adminId String?
  Admin   Admin?  @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model Programme {
  id              String         @id
  conferenceStart DateTime
  days            ProgrammeDay[]

  // Relation to seperate demo data
  adminId String?
  Admin   Admin?  @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model ProgrammeDay {
  id             String             @id @default(uuid())
  date           DateTime
  additionalInfo String             @default("")
  start          DateTime?
  end            DateTime?
  items          ProgrammeDayItem[]
  Programme      Programme?         @relation(fields: [programmeId], references: [id])
  programmeId    String?

  // Relation to seperate demo data
  adminId String?
  Admin   Admin?  @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

enum ItemType {
  ITEM
  CHAIRMAN
}

model ProgrammeDayItem {
  type           ItemType      @default(ITEM)
  id             String        @id @default(uuid())
  index          Int?
  duration       Int           @default(0)
  title          String        @default("") @db.VarChar(255)
  participantId  String        @default("")
  abstractId     String        @default("")
  ProgrammeDay   ProgrammeDay? @relation(fields: [programmeDayId], references: [id])
  programmeDayId String?

  // Relation to seperate demo data
  adminId String?
  Admin   Admin?  @relation(fields: [adminId], references: [id], onDelete: Cascade)
}
